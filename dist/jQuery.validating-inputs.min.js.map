{"version":3,"sources":["jQuery.validating-inputs.min.js"],"names":["$","prop","element","property","check","trim","attr","toLowerCase","isUndefined","value","controller","Validating","append","name","values","locals","Array","length","parent","closest","index","splice","val","join","regex","trimValue","data","test","i","l","required","selectors","k","output","patterns","hasOwnProperty","push","tel","url","email","color","type","pattern","RegExp","minLength","parseInt","maxLength","power","number","exponent","parts","toString","split","parseFloat","exp","config","datetime","datetime-local","date","time","week","month","range","base","step","parse","text","NaN","format","String","toUpperCase","Date","milliseconds","substring","isNaN","getTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","months","years","Math","floor","this","firstWeek","getUTCDay","year","shift","day","max","gait","min","regexEscape","replace","glob2regex","glob","options","match","escape","letter","arguments","regexEscaped","globEscaped","accepts","typeIndex","typeLength","fileIndex","fileLength","each","accept","fn","validatingInputs","notify","elements","find","add","filter","validate","jQuery"],"mappings":"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","file":"jQuery.validating-inputs.min.js","sourcesContent":["/*!\n * jQuery.validating-inputs\n * jQuery plugin to validate form input elements\n *\n * @version v1.0.3\n * @link https://github.com/orianda/jQuery.validating-inputs\n * @author Orianda <orianda@paan.de>\n * @license MIT\n */\n(function($){\n    \"use strict\";\n\n    /**\n * Validating controller\n */\nvar controller = $.Validating();\n\n/**\n * Check property of input element\n * @param {jQuery} element\n * @param {string} property\n * @returns {bool}\n */\nfunction prop(element, property) {\n    var check = element.prop(property);\n    return typeof check === 'undefined' ? $.trim(element.attr(property)).toLowerCase() === property : !!check;\n}\n\n/**\n * Is value undefined?\n * @param {*} value\n * @returns {boolean}\n */\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\n\n\n/**\n * Prepare controller for subsequent validators\n */\ncontroller.append('*', function (element) {\n    var name = element.attr('name') || '',\n        value = element.values()[name];\n    element.locals = {\n        name  : name,\n        value : value instanceof Array ? value : isUndefined(value) ? [] : [value]\n    };\n});\n\n\n/**\n * Prevent validating if the input is disabled\n */\ncontroller.append('*', function (element) {\n    while (element.length) {\n        if (prop(element, 'disabled')) {\n            return false;\n        }\n        element = element.parent().closest('fieldset');\n    }\n});\n\n\n(function () {\n\n    /**\n     * Regular expression to test trim attribute value\n     * @type {RegExp}\n     */\n    var regex = /^true|on|1|yes|trim$/i;\n\n    /**\n     * Trim input element value\n     * @param {jQuery} element\n     */\n    function trim(element) {\n        var value = element.locals.value,\n            index = value.length - 1;\n        for (index; index >= 0; index--) {\n            value[index] = $.trim(value[index]);\n            if (value[index].length === 0) {\n                value.splice(index, 1);\n            }\n        }\n        element.val(value.join(','));\n    }\n\n    /**\n     * Native trim\n     */\n    controller.append([\n        'input[type=email]',\n        'input[type=url]',\n        'input[type=tel]',\n        'input[type=color]',\n        'input[type=number]',\n        'input[type=range]',\n        'input[type=date]',\n        'input[type=datetime]',\n        'input[type=datetime-local]',\n        'input[type=time]',\n        'input[type=week]',\n        'input[type=month]'\n    ].join(','), trim);\n\n    /**\n     * Trim by option\n     */\n    controller.append([\n        'input:not([type])',\n        'input[type=hidden]',\n        'input[type=text]',\n        'input[type=password]',\n        'input[type=search]',\n        'textarea'\n    ].join(','), function (element) {\n        var trimValue = $.trim(element.data('trim'));\n        if (regex.test(trimValue)) {\n            trim(element);\n        }\n    });\n\n}());\n\n\n/**\n * Register validator\n */\ncontroller.append([\n    'input:not([type])',\n    'input[type=text]',\n    'input[type=password]',\n    'input[type=search]',\n    'input[type=email]',\n    'input[type=url]',\n    'input[type=tel]',\n    'input[type=color]',\n    'input[type=number]',\n    'input[type=datetime]',\n    'input[type=datetime-local]',\n    'input[type=date]',\n    'input[type=time]',\n    'input[type=week]',\n    'input[type=month]',\n    'input[type=radio]',\n    'input[type=checkbox]',\n    'select',\n    'textarea'\n].join(','), function (element) {\n    var value = element.locals.value,\n        required = prop(element, 'required'),\n        i, l;\n    for (i = 0, l = value.length; i < l; i++) {\n        if (value[i].length) {\n            return true;\n        }\n    }\n    return required ? 'required' : false;\n});\n\n\n(function () {\n\n    /**\n     * Native type patterns\n     * @see http://www.w3.org/TR/html-markup/datatypes.html\n     * @type {Object}\n     */\n    var patterns = {\n        tel   : /./,\n        url   : /^[a-z]+:\\/\\/.+/i,\n        email : /^[a-z\\d.!#$%&’*+\\/=?\\^_`{|}~\\-]+@[a-z\\d\\-]+(?:\\.[a-z\\d\\-]+)*$/i,\n        color : /^#[a-f\\d]{6}$/i\n    };\n\n    /**\n     * Get selectors\n     * @returns {string[]}\n     */\n    function selectors() {\n        var output = [],\n            k;\n        for (k in patterns) {\n            if (patterns.hasOwnProperty(k)) {\n                output.push('input[type=' + k + ']');\n            }\n        }\n        return output;\n    }\n\n    /**\n     * Register validator\n     */\n    controller.append(selectors().join(','), function (element) {\n        var type = $.trim(element.attr('type')).toLowerCase(),\n            pattern = patterns[type],\n            value = element.locals.value,\n            i, l;\n        for (i = 0, l = value.length; i < l; i++) {\n            if (!pattern.test(value[i])) {\n                return 'type';\n            }\n        }\n    });\n\n}());\n\n\n/**\n * Register validator\n */\ncontroller.append([\n    'input[pattern]:not([type])',\n    'input[type=text][pattern]',\n    'input[type=password][pattern]',\n    'input[type=search][pattern]',\n    'input[type=email][pattern]',\n    'input[type=url][pattern]',\n    'input[type=tel][pattern]'\n].join(','), function (element) {\n    var value = element.locals.value,\n        pattern = new RegExp('^' + element.attr('pattern') + '$'),\n        i, l;\n    for (i = 0, l = value.length; i < l; i++) {\n        if (!pattern.test(value[i])) {\n            return 'pattern';\n        }\n    }\n});\n\n\n/**\n * Register minLength and maxLength validator\n */\ncontroller.append([\n    'input[minlength]:not([type])',\n    'input[maxlength]:not([type])',\n    'input[type=text][minlength]',\n    'input[type=text][maxlength]',\n    'input[type=password][minlength]',\n    'input[type=password][maxlength]',\n    'input[type=search][minlength]',\n    'input[type=search][maxlength]',\n    'input[type=email][minlength]',\n    'input[type=email][maxlength]',\n    'input[type=url][minlength]',\n    'input[type=url][maxlength]',\n    'input[type=tel][minlength]',\n    'input[type=tel][maxlength]',\n    'textarea[minlength]',\n    'textarea[maxlength]'\n].join(','), function (element) {\n    var value = element.locals.value,\n        minLength = parseInt(element.attr('minlength'), 10),\n        maxLength = parseInt(element.attr('maxlength'), 10),\n        i, l;\n    for (i = 0, l = value.length; i < l; i++) {\n        if (value[i].length < minLength) {\n            return 'minlength';\n        }\n        if (value[i].length > maxLength) {\n            return 'maxlength';\n        }\n    }\n});\n\n\n(function () {\n\n    var patterns, config;\n\n    /**\n     * Set exponent of number\n     * @param {number} number\n     * @param {number} exponent\n     * @returns {number}\n     */\n    function power(number, exponent) {\n        var parts = number.toString().split('E');\n        parts[1] = parts.length > 1 ? parseInt(parts[1], 10) : 0;\n        parts[1] += exponent;\n        return parseFloat(parts.join('E'));\n    }\n\n    /**\n     * Extracting fraction and exponent\n     * @param {number} number\n     * @returns {number}\n     */\n    function exponent(number) {\n        var parts = number.toString().split('E'),\n            exp = parts.length > 1 ? parseInt(parts[1], 10) : 0;\n        parts = parts[0].split('.');\n        exp += parts.length > 1 ? parts[1].length : 0;\n        return exp;\n    }\n\n    /**\n     * Type patterns\n     * @see http://www.w3.org/TR/html-markup/datatypes.html\n     * @type {Object}\n     */\n    patterns = {\n        'datetime'       : /^\\d{4}-(0\\d|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)(Z|[+\\-]([01]\\d|2[0-3]):([0-5]\\d))$/,\n        'datetime-local' : /^\\d{4}-(0\\d|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-3]):([0-5]\\d)(?::([0-5]\\d)([.]\\d+)?)?$/,\n        'date'           : /^\\d{4}-(0\\d|1[0-2])-([0-2]\\d|3[01])$/,\n        'time'           : /^([01]\\d|2[0-3]):([0-5]\\d)(?::([0-5]\\d)([.]\\d+)?)?$/,\n        'week'           : /^\\d{4}-W([0-4]\\d|5[0-3])$/,\n        'month'          : /^\\d{4}-(0\\d|1[0-2])$/,\n        'number'         : /^[+-]?\\d+([.,]\\d+)?(E[+-]?\\d+)?$/i,\n        'range'          : /^[+\\-]?\\d+([.]\\d+)?(E[+\\-]?\\d+)?$/i\n    };\n\n    /**\n     * Default values, formatter and parsers for the validation of the step attribute.\n     * @see http://www.w3.org/TR/html-markup/datatypes.html\n     */\n    config = {\n\n        /**\n         * Number scope\n         * @type {Object}\n         */\n        'number' : {\n\n            /**\n             * Default base for number type\n             * @type {number}\n             */\n            base : 0,\n\n            /**\n             * Default step for number type\n             * @type {number}\n             */\n            step : 1,\n\n            /**\n             * Parses value to number\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                text = $.trim(text);\n                return patterns.number.test(text) ? parseFloat(text) : NaN;\n            },\n\n            /**\n             * Formats value to string\n             * @param {number} value\n             * @returns {string}\n             */\n            format : function (value) {\n                return String(value);\n            }\n\n        },\n\n        /**\n         * Range scope\n         * @type {Object}\n         */\n        'range' : {\n\n            /**\n             * Default base for range type\n             * @type {number}\n             */\n            base : 0,\n\n            /**\n             * Default step for range type\n             * @type {number}\n             */\n            step : 1,\n\n            /**\n             * Parses value to number\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                text = $.trim(text);\n                return patterns.range.test(text) ? parseFloat(text) : NaN;\n            },\n\n            /**\n             * Formats value to string\n             * @param {number} value\n             * @returns {string}\n             */\n            format : function (value) {\n                return String(value);\n            }\n\n        },\n\n        /**\n         * Datetime scope\n         * @type {Object}\n         */\n        'datetime' : {\n\n            /**\n             * Default base for datetime type\n             * @type {number}\n             */\n            base : 0,\n\n            /**\n             * Default step for datetime type\n             * @type {number}\n             */\n            step : 60000,\n\n            /**\n             * Parses date to milliseconds.\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                text = $.trim(text).toUpperCase();\n                return patterns.datetime.test(text) ? Date.parse(text) : NaN;\n            },\n\n            /**\n             * Formats milliseconds to string\n             * @param {number} milliseconds\n             * @returns {string}\n             */\n            format : function (milliseconds) {\n                var date = config.date.format(milliseconds),\n                    time = config.time.format(milliseconds);\n                return date.length && time.length ? date + 'T' + time.substring(0, 8) + 'Z' : '';\n            }\n\n        },\n\n        /**\n         * Local datetime scope\n         * @type {Object}\n         */\n        'datetime-local' : {\n\n            /**\n             * Default base for local datetime type\n             * @type {number}\n             */\n            base : 0,\n\n            /**\n             * Default step for local datetime type\n             * @type {number}\n             */\n            step : 60000,\n\n            /**\n             * Parses date to milliseconds.\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                text = $.trim(text).toUpperCase();\n                return patterns['datetime-local'].test(text) ? Date.parse(text) : NaN;\n            },\n\n            /**\n             * Formats milliseconds to string\n             * @param {number} milliseconds\n             * @returns {string}\n             */\n            format : function (milliseconds) {\n                var date = new Date(milliseconds),\n                    text = '';\n                if (!isNaN(date.getTime())) {\n                    text += String(date.getFullYear() + 10000).substring(1);\n                    text += '-';\n                    text += String(date.getMonth() + 100).substring(1);\n                    text += '-';\n                    text += String(date.getDate() + 100).substring(1);\n                    text += 'T';\n                    text += String(date.getHours() + 100).substring(1);\n                    text += ':';\n                    text += String(date.getMinutes() + 100).substring(1);\n                    text += ':';\n                    text += String(date.getSeconds() + 100).substring(1);\n                    if (date.getMilliseconds()) {\n                        text += '.' + date.getMilliseconds();\n                    }\n                }\n                return text;\n            }\n\n        },\n\n        /**\n         * Date scope\n         * @type {Object}\n         */\n        'date' : {\n\n            /**\n             * Default base for date type\n             * @type {number}\n             */\n            base : 0,\n\n            /**\n             * Default step for date type\n             * @type {number}\n             */\n            step : 86400000,\n\n            /**\n             * Parses date to milliseconds.\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                text = $.trim(text);\n                return patterns.date.test(text) ? Date.parse(text + 'T00:00:00Z') : NaN;\n            },\n\n            /**\n             * Formats milliseconds to string\n             * @param {number} milliseconds\n             * @returns {string}\n             */\n            format : function (milliseconds) {\n                var date = new Date(milliseconds),\n                    text = '';\n                if (!isNaN(date.getTime())) {\n                    text += String(date.getUTCFullYear() + 10000).substring(1);\n                    text += '-';\n                    text += String(date.getUTCMonth() + 100).substring(1);\n                    text += '-';\n                    text += String(date.getUTCDate() + 100).substring(1);\n                }\n                return text;\n            }\n\n        },\n\n        /**\n         * Time scope\n         * @type {Object}\n         */\n        'time' : {\n\n            /**\n             * Default base for time type\n             * @type {number}\n             */\n            base : 0,\n\n            /**\n             * Default step for time type\n             * @type {number}\n             */\n            step : 60000,\n\n            /**\n             * Parses time to milliseconds.\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                var parts;\n                text = $.trim(text);\n                if (patterns.time.test(text)) {\n                    parts = text.split('.', 2);\n                    parts[0] = parts[0].split(':', 3);\n                    parts[0][0] = parseInt(parts[0][0], 10);\n                    parts[0][1] = parseInt(parts[0][1], 10);\n                    parts[0][2] = parts[0].length < 3 ? 0 : parseInt(parts[0][2], 10);\n                    parts[0] = parts[0][0] * 3600 + parts[0][1] * 60 + parts[0][2];\n                    parts[1] = parts.length === 1 ? 0 : parseInt(parts[1], 10);\n                    return parts[0] * 1000 + parts[1];\n                } else {\n                    return NaN;\n                }\n            },\n\n            /**\n             * Formats milliseconds to string\n             * @param {number} milliseconds\n             * @returns {string}\n             */\n            format : function (milliseconds) {\n                var date = new Date(milliseconds),\n                    text = '';\n                if (!isNaN(date.getTime())) {\n                    text += String(date.getUTCHours() + 100).substring(1);\n                    text += ':';\n                    text += String(date.getUTCMinutes() + 100).substring(1);\n                    text += ':';\n                    text += String(date.getUTCSeconds() + 100).substring(1);\n                    if (date.getUTCMilliseconds()) {\n                        text += '.' + date.getUTCMilliseconds();\n                    }\n                }\n                return text;\n            }\n\n        },\n\n        /**\n         * Month scope\n         * @type {Object}\n         */\n        'month' : {\n\n            /**\n             * Default base for month type\n             * @type {number}\n             */\n            base : 0,\n\n            /**\n             * Default step for month type\n             * @type {number}\n             */\n            step : 1,\n\n            /**\n             * Parses date to milliseconds.\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                var parts;\n                text = $.trim(text);\n                if (patterns.month.test(text)) {\n                    parts = text.split('-');\n                    return (parts[0] - 1970) * 12 + parts[1] - 1;\n                } else {\n                    return NaN;\n                }\n            },\n\n            /**\n             * Formats milliseconds to string\n             * @param {number} months\n             * @returns {string}\n             */\n            format : function (months) {\n                var years = Math.floor(months / 12) + 1970;\n                months = months % 12 + 1;\n                return years + '-' + months;\n            }\n\n        },\n\n        /**\n         * Week scope\n         * @type {Object}\n         */\n        'week' : {\n\n            /**\n             * Default base for week type\n             * @type {number}\n             */\n            base : 259200000,\n\n            /**\n             * Default step for week type\n             * @type {number}\n             */\n            step : 604800000,\n\n            /**\n             * Parses date to milliseconds.\n             * @param {string|number} text\n             * @returns {number}\n             */\n            parse : function (text) {\n                var parts;\n                text = $.trim(text).toUpperCase();\n                if (patterns.week.test(text)) {\n                    parts = text.split('-W');\n                    return this.firstWeek(parts[0]) + parseInt(parts[1], 10) * 604800000;\n                } else {\n                    return NaN;\n                }\n            },\n\n            /**\n             * Formats milliseconds to string\n             * @param {number} milliseconds\n             * @returns {string}\n             */\n            format : function (milliseconds) {\n                var date = new Date(milliseconds),\n                    text = '';\n                if (!isNaN(date.getTime())) {\n                    text += String(date.getUTCFullYear() + 10000).substring(1);\n                    text += '-W';\n                    text += String(date.getUTCDay() + 100).substring(1);\n                }\n                return text;\n            },\n\n            /**\n             * Returns first day of first week of the given year\n             * @param {number|string} year\n             * @param {number|string} [shift] Represents what day of week should be returned.\n             * @returns {number}\n             */\n            firstWeek : function (year, shift) {\n                var date = Date.parse(year + '-01-01T00:00:00Z'),\n                    day = new Date(date).getUTCDay();\n                day = day > 4 ? 7 - day : -day;\n                shift = Math.max(0, parseInt(shift, 10)) || 0;\n                shift %= 7;\n                return date + 86400000 * (day + shift);\n            }\n\n        }\n    };\n\n    /**\n     * Register validator\n     */\n    controller.append([\n        'input[type=number]',\n        'input[type=range]',\n        'input[type=datetime]',\n        'input[type=datetime-local]',\n        'input[type=date]',\n        'input[type=time]',\n        'input[type=week]',\n        'input[type=month]'\n    ].join(','), function (element) {\n        var type = $.trim(element.attr('type')).toLowerCase(),\n            min = config[type].parse(element.attr('min')),\n            max = config[type].parse(element.attr('max')),\n            step = $.trim(element.attr('step')),\n            value = config[type].parse(element.locals.value[0]),\n            gait, base, exp;\n        if (isNaN(value)) {\n            return 'type';\n        } else if (min > value) {\n            return 'min';\n        } else if (max < value) {\n            return 'max';\n        } else if (step.toLowerCase() !== 'any') {\n            gait = config.number.parse(step);\n            gait = !isNaN(gait) && gait > 0 ? gait : config[type].step;\n            base = !isNaN(min) ? min : config[type].base;\n            value -= base;\n            exp = exponent(gait);\n            gait = power(gait, exp);\n            value = power(value, exp);\n            if (exponent(value) < 0 || value % gait > 0) {\n                return 'step';\n            }\n        }\n    });\n\n}());\n\n\n(function () {\n\n    /**\n     * Escapes string to be used in regular expressions.\n     * @param {string} text\n     * @return {string}\n     */\n    function regexEscape(text) {\n        return String(text).replace(/[-[\\]\\/{}()*+?.\\\\^$|]/g, '\\\\$&');\n    }\n\n    /**\n     * Converts glob to regular expression object.\n     * @param {string} glob\n     * @param {string} [options]\n     * @returns {RegExp}\n     */\n    function glob2regex(glob, options) {\n        glob = regexEscape(glob);\n        glob = glob.replace(/(\\\\+)([^\\\\]?)|([*?#])/g, function (match, escape) {\n            var letter = arguments[2] + arguments[3],\n                regexEscaped = escape.length % 2 && !/[*?]/.test(letter),\n                globEscaped = (escape.length - escape.length % 2) / 2 % 2;\n            escape = escape.substring(globEscaped, escape.length / 2 + regexEscaped);\n            if (letter === '*') {\n                letter = globEscaped ? '\\\\*' : '.*';\n            } else if (letter === '?') {\n                letter = globEscaped ? '\\\\?' : '.';\n            } else if (letter === '#') {\n                letter = globEscaped ? '#' : '\\\\d';\n            }\n            return escape + letter;\n        });\n        return new RegExp(glob, options);\n    }\n\n    /**\n     * Register validator\n     */\n    controller.append('input[type=file]', function (element) {\n        var value = element.locals.value,\n            required = prop(element, 'required'),\n            accepts, typeIndex, typeLength, fileIndex, fileLength;\n        if (!value.length && required) {\n            return'required';\n        }\n        accepts = $.trim(element.attr('accept')).split(/|,/);\n        $.each(accepts, function (index, accept) {\n            accepts[index] = glob2regex(accept);\n        });\n        fileLength = value.length;\n        typeLength = accepts.length;\n        for (fileIndex = 0; fileIndex < fileLength; fileIndex++) {\n            for (typeIndex = 0; typeIndex < typeLength; typeIndex++) {\n                if (accepts[typeIndex].test(value[fileIndex].type)) {\n                    break;\n                }\n            }\n            if (typeIndex === typeLength) {\n                return 'accept';\n            }\n        }\n    });\n\n}());\n\n\n/**\n * jQuery module to validate all inputs contained by the selection and there nodes\n * @see http://www.w3.org/html/wg/drafts/html/master/forms.html#the-input-element\n * @see http://www.w3.org/TR/html-markup/datatypes.html\n * @param {boolean} [notify=false]\n * @returns {promise}\n */\n$.fn.validatingInputs = function (notify) {\n    var elements = this.find(':input').add(this.filter(':input')).filter([\n        'input:not([type])',\n        'input[type=hidden]',\n        'input[type=text]',\n        'input[type=password]',\n        'input[type=search]',\n        'input[type=email]',\n        'input[type=url]',\n        'input[type=tel]',\n        'input[type=color]',\n        'input[type=number]',\n        'input[type=range]',\n        'input[type=datetime]',\n        'input[type=datetime-local]',\n        'input[type=date]',\n        'input[type=time]',\n        'input[type=week]',\n        'input[type=month]',\n        'input[type=radio]',\n        'input[type=checkbox]',\n        'input[type=file]',\n        'select',\n        'textarea'\n    ].join(','));\n    return controller.validate(elements, notify);\n};\n\n/**\n * Make the controller available to the outsiders\n * @type {$.Validating}\n */\n$.fn.validatingInputs.controller = controller;\n\n}(jQuery));"],"sourceRoot":"/source/"}